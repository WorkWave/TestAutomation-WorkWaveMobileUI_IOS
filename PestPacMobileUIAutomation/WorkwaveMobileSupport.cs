using Newtonsoft.Json;
using System;
using System.IO;
using WorkWave.Workwave.Mobile.Configuration;
using WorkWave.TA.TestEngine;
using OpenQA.Selenium;
using OpenQA.Selenium.Appium.MultiTouch;
using OpenQA.Selenium.Appium;
using System.Collections.Generic;
using System.Linq;
using System.Timers;
using OpenQA.Selenium.Appium.Interfaces;

namespace WorkWave.Workwave.Mobile
{
    class WorkwaveMobileSupport
    {
        private static WorkwaveMobileConfiguration WorkwaveMobileConfig;
        private static bool OrderDetailsNeeded = false;
        private static string FeatureInProgress = "";
        private static bool WorkOrderDiscounts = true;

        public static void InitializeWorkwaveMobileConfig()
        {
            string workingDir = System.IO.Path.GetDirectoryName(System.Reflection.Assembly.GetExecutingAssembly().Location);
            string configFile_FullName = String.Format("{0}\\WorkwaveMobileConfig.json", workingDir);

            try
            {
                using (StreamReader file = new StreamReader(configFile_FullName))
                {
                    string json = file.ReadToEnd();
                    WorkwaveMobileConfig = JsonConvert.DeserializeObject<WorkwaveMobileConfiguration>(json);
                    WorkwaveMobileConfig.LogInStatus = false;
                    WorkwaveMobileConfig.TimedInStatus = "TimedOut";
                }
            }
            catch (FileNotFoundException)
            {
                string errMsg = String.Format("Could not find the WorkwaveConfig file, {0}.  This file is purposedly ommitted from source control to protect the integrity " +
                    "of the test database running in the continuous delivery pipeline.  It will be automatically generated by the " +
                    "CI server in the pipeline (database creds stored in secure variables).  Developers, to run this locally, " +
                    "generate a WorkwaveConfig.json file (rpierro@workwave.com for template) and place in the Configuration folder.", configFile_FullName);

                WebApplication.Log.Fatal(errMsg);

                throw;
            }

            WorkwaveMobileConfig.CurrentSessionOrderLocation = "";
        }

        public static bool GetOrderDetailsNeeded() => OrderDetailsNeeded;

        public static void SetOrderDetailsNeeded(bool status)
        {
            OrderDetailsNeeded = status;
        }

        public static string DefaultEmail
        {
            get { return WorkwaveMobileConfig.Default_Email; }
        }

        public static string DefaultPassword
        {
            get { return WorkwaveMobileConfig.Default_Password; }
        }

        public static string RandomVariableID
        {
            get { return WorkwaveMobileConfig.RandomVariableID; }
        }

        public static bool WorkOrderDiscountsExist
        {
            get { return WorkOrderDiscounts; }
        }

        public static void SetWorkOrderDiscountsStatus(bool status)
        {
            WorkOrderDiscounts = status;
        }

        public static string CurrentSessionOrderLocation
        {
            get { return WorkwaveMobileConfig.CurrentSessionOrderLocation; }
        }

        public static void SetCurrentSessionOrderLocation(string text)
        {
            WorkwaveMobileConfig.CurrentSessionOrderLocation = text;
        }

        public static string GetFeature() => FeatureInProgress;

        public static void SetFeature(string text) => FeatureInProgress = text;

        public static string generateRandomString(int chars)
        {
            string random = RandomString(chars);
            WorkwaveMobileConfig.RandomVariableID = random;
            return WorkwaveMobileConfig.RandomVariableID;
        }

        private static Random random = new Random();
        public static string RandomString(int length)
        {
            const string chars = "ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789";
            return new string(Enumerable.Repeat(chars, length)
              .Select(s => s[random.Next(s.Length)]).ToArray());
        }

        /// <summary>
        /// Generates a random int at a given length. Avoids zeroes in the number.
        /// Typically 5 or less digits is the safest as some higher values don't make it to web depending 
        /// on the field.
        /// </summary>
        /// <param name="length"></param>
        /// <returns></returns>
        public static string RandomInt(int length)
        {
            const string chars = "123456789";
            return new string(Enumerable.Repeat(chars, length)
              .Select(s => s[random.Next(s.Length)]).ToArray());
        }

        public static string RandomInt(int length, string chars)
        {
            return new string(Enumerable.Repeat(chars, length)
              .Select(s => s[random.Next(s.Length)]).ToArray());
        }

        public static string RandomDouble(int length)
        {
            const string chars = "123456789";
                return new string(Enumerable.Repeat(chars, length)
              .Select(s => s[random.Next(s.Length)]).ToArray()) + ".00";
        }

        public static string GetCurrentTime()
        {
            return WebApplication.Instance.WebDriver.FindElement(By.Id("clock")).GetAttribute("text");
        }
        public static void ScrollToElement(IWebElement element)
        {
            TouchAction action = new TouchAction((AppiumDriver<IWebElement>)WebApplication.Instance.WebDriver);
            action.Press(0, 800).MoveTo(0, 750).Wait(500).Release().Wait(2500);

            while (!SeleniumUtility.WaitFor(CustomExpectedConditions.ElementIsVisible(element), TimeSpan.FromSeconds(1)))
            {
                action.Perform();
            }
        }

        // Direction = true = Down
        // Direction = false = Up
        public static void ScrollToElement(IWebElement element, bool direction)
        {
            TouchAction action = new TouchAction((AppiumDriver<IWebElement>)WebApplication.Instance.WebDriver);

            int moveToPosition = 0;
            if (direction)
                moveToPosition = 750;
            else
                moveToPosition = 850;

            action.Press(0, 800).MoveTo(0, moveToPosition).Wait(1000).Release().Wait(2000);

            while (!SeleniumUtility.WaitFor(CustomExpectedConditions.ElementIsVisible(element), TimeSpan.FromSeconds(3)))
            {
                
                action.Perform();
            }
        }

        // Scroll Down the page with no particular target
        // @param distance: Use negative numbers to scroll down, positive numbers to scroll up
        public static void ScrollNoTarget(int distance)
        {
            TouchAction action = new TouchAction((AppiumDriver<IWebElement>)WebApplication.Instance.WebDriver);
            action.Press(0, 800).MoveTo(0, 800 + distance).Wait(1000).Release().Wait(2000);
            action.Perform();
        }

        public static void ScrollNoTarget(int x1, int y1, int x2, int y2)
        {
            TouchAction action = new TouchAction((AppiumDriver<IWebElement>)WebApplication.Instance.WebDriver);
            action.Press(x1, y1).MoveTo(x2, y2).Wait(500).Release().Wait(2500);
            action.Perform();
        }

        public static void TapTarget(int x1, int y1)
        {
            TouchAction action = new TouchAction((AppiumDriver<IWebElement>)WebApplication.Instance.WebDriver);
            action.Press(x1, y1).Release().Wait(1500);
            action.Perform();
        }

        public static void TapTarget(IWebElement element)
        {
            TouchAction action = new TouchAction((AppiumDriver<IWebElement>)WebApplication.Instance.WebDriver);
            action.Press(element).Release().Wait(1500);
            action.Perform();
        }

        public static void ZoomIn(int x1, int y1)
        {
            ((AppiumDriver<IWebElement>)WebApplication.Instance.WebDriver).Zoom(x1, y1);
        }

        public static void TapTargetNoWait(int x1, int y1)
        {
            ((AppiumDriver<IWebElement>)WebApplication.Instance.WebDriver).Tap(1, x1, y1, 1);
        }

        public static void LongPressPoint(int x1, int y1)
        {
            TouchAction action = new TouchAction((AppiumDriver<IWebElement>)WebApplication.Instance.WebDriver);
            action.Press(x1,y1).Wait(3000).Release().Perform();
        }

        public static void LongPressMovePoint(int x1, int y1, int x2, int y2)
        {
            TouchAction action = new TouchAction((AppiumDriver<IWebElement>)WebApplication.Instance.WebDriver);
            action.Press(x1, y1).Wait(3000)
            .MoveTo(x2,y2).Release().Perform();
        }

        public static void PressMovePoint(int x1, int y1, int x2, int y2)
        {
            TouchAction action = new TouchAction((AppiumDriver<IWebElement>)WebApplication.Instance.WebDriver);
            action.Press(x1, y1)
            .MoveTo(x2, y2).Release().Perform();
        }

        public static void LongPressTarget(IWebElement target)
        {
            TouchAction action = new TouchAction((AppiumDriver<IWebElement>)WebApplication.Instance.WebDriver);
            action.Press(target).Wait(3000).Release().Perform();
        }

        public static bool IsDisplayed(IWebElement element)
        {
            try
            {
                return element.Displayed;
            }
            catch
            {
                return false;
            }
        }

        /// <summary>
        /// Takes in a ClassName to find the list of elements by
        /// Value is the Attribute value you wish to find and click
        /// </summary>
        /// <param name="className"></param>
        /// <param name="value"></param>
        public static bool ClickElementInList(string className, string value)
        {
            bool clicked = false;

            IList<IWebElement> l = WebApplication.Instance.WebDriver.FindElements(By.ClassName(className));

            foreach (IWebElement e in l)
            {
                if (e.GetAttribute("Text").Equals(value))
                {
                    e.Click();
                    clicked = true;
                    break;
                }
            }
            return clicked;
        }

        public static bool GetLoginStatus() => WorkwaveMobileConfig.LogInStatus;
        public static void Login()
        {
            WorkwaveMobileConfig.LogInStatus = true;
        }

        public static void Logout()
        {
            WorkwaveMobileConfig.LogInStatus = false;
        }

        public static string GetTimedInStatus() => WorkwaveMobileConfig.TimedInStatus;
        public static void TimeInChange(string status)
        {
            WorkwaveMobileConfig.TimedInStatus = status;
        }

        public Screenshot TakeScreenshot()
        {
            return ((AppiumDriver<IWebElement>)WebApplication.Instance.WebDriver).GetScreenshot();
        }

        /// <summary>
        /// Takes in a ClassName to find the list of elements by
        /// Value is the Attribute value you wish to verify is in the list of elements
        /// </summary>
        /// <param name="className"></param>
        /// <param name="value"></param>
        /// <returns></returns>
        public static bool FoundInList(string className, string value)
        {
            bool found = false;

            IList<IWebElement> list = WebApplication.Instance.WebDriver.FindElements(By.ClassName(className));

            foreach (IWebElement e in list)
            {
                if (e.GetAttribute("value").ToLower().Contains(value.ToLower()))
                {
                    found = true;
                    break;
                }
            }

            return found;
        }

        public static bool FoundInList(IWebElement elem, string className, string value)
        {
            bool found = false;

            IList<IWebElement> list = elem.FindElements(By.ClassName(className));

            foreach (IWebElement e in list)
            {
                if (e.GetAttribute("value").ToLower().Contains(value.ToLower()))
                {
                    found = true;
                    break;
                }
            }

            return found;
        }

        /// <summary>
        /// Pass in the back button on for a page,
        /// Then this method will take you to the Daily View Page.
        /// The same back button will be on every view in the mobile app
        /// except the daily view page
        /// </summary>
        /// <param name="backButton"></param>
        /// <returns></returns>
       

        public static string GetDeviceName()
        {
            return WebApplication.Instance.Config.DeviceName;
        }

        public static void DoubleTap(int x, int y)
        {
            TouchAction action = new TouchAction((AppiumDriver<IWebElement>)WebApplication.Instance.WebDriver);
            action.Tap(x, y).Tap(x, y).Perform();
            action.Wait(3000);
        }

        public static void Swipe(int diff)
        {
            ((AppiumDriver<IWebElement>)WebApplication.Instance.WebDriver).Swipe(0, 1139, 0, 1139 + diff, 1);
        }

        public static void Swipe(int x1, int y1, int x2, int y2)
        {
            ((AppiumDriver<IWebElement>)WebApplication.Instance.WebDriver).Swipe(x1, y1, x2, y2, 1);
        }

        public static void getScenarioStatus()
        {

        }

        /// <summary>
        /// This button is always the first instance of android.widget.ImageButton on every page and it is always
        /// the back button
        /// </summary>
        public static void GoBack()
        {
            WebApplication.Instance.WebDriver.FindElement(By.ClassName("android.widget.ImageButton")).Click();  
        }

        /// <summary>
        /// This is essentially thread.sleep. Try to avoid using this if possible but there are a few scenarios
        /// where I have found it unnavoidable (such as button text changing)
        /// </summary>
        /// <param name="time"> How many seconds to wait. </param>
        public static void DirtyWait(int time)
        {
            TouchAction action = new TouchAction((AppiumDriver<IWebElement>)WebApplication.Instance.WebDriver);
            action.Wait(time*1000);
            action.Perform();
        }

        public static IWebElement GetCustomElementById(string id)
        {
            IWebElement elem = null;

            try
            {
                elem = WebApplication.Instance.WebDriver.FindElement(By.Id(id));
                return elem;
            }
            catch
            {
                WebApplication.Log.DebugFormat("Could not find the element with the id of: {}", id);
                return elem;
            }
        }

        public static IWebElement GetCustomElementByClassName(string name)
        {
            IWebElement elem = null;

            try
            {
                elem = WebApplication.Instance.WebDriver.FindElement(By.ClassName(name));
                return elem;
            }
            catch
            {
                WebApplication.Log.DebugFormat("Could not find the element with the id of: {}", name);
                return elem;
            }
        }

        public static void HideKeyboard() => ((AppiumDriver<IWebElement>)WebApplication.Instance.WebDriver).HideKeyboard();

        public static void SendKeysToKeyboard(string text)
        {
            ((AppiumDriver<IWebElement>)WebApplication.Instance.WebDriver).Keyboard.SendKeys(text);
        }

        public static void SwipeIOSUsingCoordinates(IPerformsTouchActions driver, double startX, double startY, double endX, double endY, int duration)
        {
            ITouchAction touchAction = new TouchAction(driver)
            .Press(startX, startY)
            .Wait(duration)
            .MoveTo(endX / 2, endY / 4)
            .Release();
            touchAction.Perform();
        }
        public static void SwipeDownIOS(String elementID)
        {
            // PestPacMobileSupport.ScrollToElement(ContactLabel);
            Dictionary<string, string> scrollObject = new Dictionary<string, string>();
            scrollObject.Add("direction", "down");
            scrollObject.Add("accessibilityLabel", elementID);
            ((IJavaScriptExecutor)WebApplication.Instance.WebDriver).ExecuteScript("mobile: scroll", scrollObject);

        }
        public static IList<IWebElement> GetList(string className) => WebApplication.Instance.WebDriver.FindElements(By.ClassName(className));

    }
}
